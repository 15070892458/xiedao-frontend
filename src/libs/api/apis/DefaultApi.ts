/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CompletionRequest,
  Document,
  DocumentCreate,
  DocumentUpdate,
  DocumentsMetas,
  HTTPValidationError,
  MessagePublic,
  Token,
  UserCreate,
  UserPublic,
} from '../models/index';
import {
    CompletionRequestFromJSON,
    CompletionRequestToJSON,
    DocumentFromJSON,
    DocumentToJSON,
    DocumentCreateFromJSON,
    DocumentCreateToJSON,
    DocumentUpdateFromJSON,
    DocumentUpdateToJSON,
    DocumentsMetasFromJSON,
    DocumentsMetasToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MessagePublicFromJSON,
    MessagePublicToJSON,
    TokenFromJSON,
    TokenToJSON,
    UserCreateFromJSON,
    UserCreateToJSON,
    UserPublicFromJSON,
    UserPublicToJSON,
} from '../models/index';

export interface CreateUserDocumentDocumentsPostRequest {
    documentCreate: DocumentCreate;
}

export interface CreateUserUsersPostRequest {
    userCreate: UserCreate;
}

export interface DeleteUserDocumentDocumentsDocumentUuidDeleteRequest {
    documentUuid: string;
}

export interface HandleCompletionDataLlmCompletionPostRequest {
    completionRequest: CompletionRequest;
    protocol?: string;
}

export interface HandleTitleDataLlmTitlePostRequest {
    completionRequest: CompletionRequest;
}

export interface LoginForAccessTokenTokenPostRequest {
    username: string;
    password: string;
    grantType?: string | null;
    scope?: string;
    clientId?: string | null;
    clientSecret?: string | null;
}

export interface ReadUserDocumentDocumentsDocumentUuidGetRequest {
    documentUuid: string;
}

export interface UpdateUserDocumentDocumentsDocumentUuidPatchRequest {
    documentUuid: string;
    documentUpdate: DocumentUpdate;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create User Document
     */
    async createUserDocumentDocumentsPostRaw(requestParameters: CreateUserDocumentDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters['documentCreate'] == null) {
            throw new runtime.RequiredError(
                'documentCreate',
                'Required parameter "documentCreate" was null or undefined when calling createUserDocumentDocumentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }


        let urlPath = `/documents`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentCreateToJSON(requestParameters['documentCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Create User Document
     */
    async createUserDocumentDocumentsPost(requestParameters: CreateUserDocumentDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.createUserDocumentDocumentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create User
     */
    async createUserUsersPostRaw(requestParameters: CreateUserUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPublic>> {
        if (requestParameters['userCreate'] == null) {
            throw new runtime.RequiredError(
                'userCreate',
                'Required parameter "userCreate" was null or undefined when calling createUserUsersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters['userCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPublicFromJSON(jsonValue));
    }

    /**
     * Create User
     */
    async createUserUsersPost(requestParameters: CreateUserUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPublic> {
        const response = await this.createUserUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete User Document
     */
    async deleteUserDocumentDocumentsDocumentUuidDeleteRaw(requestParameters: DeleteUserDocumentDocumentsDocumentUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagePublic>> {
        if (requestParameters['documentUuid'] == null) {
            throw new runtime.RequiredError(
                'documentUuid',
                'Required parameter "documentUuid" was null or undefined when calling deleteUserDocumentDocumentsDocumentUuidDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }


        let urlPath = `/documents/{document_uuid}`;
        urlPath = urlPath.replace(`{${"document_uuid"}}`, encodeURIComponent(String(requestParameters['documentUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagePublicFromJSON(jsonValue));
    }

    /**
     * Delete User Document
     */
    async deleteUserDocumentDocumentsDocumentUuidDelete(requestParameters: DeleteUserDocumentDocumentsDocumentUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagePublic> {
        const response = await this.deleteUserDocumentDocumentsDocumentUuidDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Handle Completion Data
     */
    async handleCompletionDataLlmCompletionPostRaw(requestParameters: HandleCompletionDataLlmCompletionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['completionRequest'] == null) {
            throw new runtime.RequiredError(
                'completionRequest',
                'Required parameter "completionRequest" was null or undefined when calling handleCompletionDataLlmCompletionPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['protocol'] != null) {
            queryParameters['protocol'] = requestParameters['protocol'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/llm/completion`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompletionRequestToJSON(requestParameters['completionRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Handle Completion Data
     */
    async handleCompletionDataLlmCompletionPost(requestParameters: HandleCompletionDataLlmCompletionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.handleCompletionDataLlmCompletionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Handle Title Data
     */
    async handleTitleDataLlmTitlePostRaw(requestParameters: HandleTitleDataLlmTitlePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['completionRequest'] == null) {
            throw new runtime.RequiredError(
                'completionRequest',
                'Required parameter "completionRequest" was null or undefined when calling handleTitleDataLlmTitlePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/llm/title`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompletionRequestToJSON(requestParameters['completionRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Handle Title Data
     */
    async handleTitleDataLlmTitlePost(requestParameters: HandleTitleDataLlmTitlePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.handleTitleDataLlmTitlePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login For Access Token
     */
    async loginForAccessTokenTokenPostRaw(requestParameters: LoginForAccessTokenTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling loginForAccessTokenTokenPost().'
            );
        }

        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling loginForAccessTokenTokenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['grantType'] != null) {
            formParams.append('grant_type', requestParameters['grantType'] as any);
        }

        if (requestParameters['username'] != null) {
            formParams.append('username', requestParameters['username'] as any);
        }

        if (requestParameters['password'] != null) {
            formParams.append('password', requestParameters['password'] as any);
        }

        if (requestParameters['scope'] != null) {
            formParams.append('scope', requestParameters['scope'] as any);
        }

        if (requestParameters['clientId'] != null) {
            formParams.append('client_id', requestParameters['clientId'] as any);
        }

        if (requestParameters['clientSecret'] != null) {
            formParams.append('client_secret', requestParameters['clientSecret'] as any);
        }


        let urlPath = `/token`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Login For Access Token
     */
    async loginForAccessTokenTokenPost(requestParameters: LoginForAccessTokenTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.loginForAccessTokenTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read User Document
     */
    async readUserDocumentDocumentsDocumentUuidGetRaw(requestParameters: ReadUserDocumentDocumentsDocumentUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters['documentUuid'] == null) {
            throw new runtime.RequiredError(
                'documentUuid',
                'Required parameter "documentUuid" was null or undefined when calling readUserDocumentDocumentsDocumentUuidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }


        let urlPath = `/documents/{document_uuid}`;
        urlPath = urlPath.replace(`{${"document_uuid"}}`, encodeURIComponent(String(requestParameters['documentUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Read User Document
     */
    async readUserDocumentDocumentsDocumentUuidGet(requestParameters: ReadUserDocumentDocumentsDocumentUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.readUserDocumentDocumentsDocumentUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read User Document List
     */
    async readUserDocumentListUsersMeDocumentsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentsMetas>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }


        let urlPath = `/users/me/documents`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsMetasFromJSON(jsonValue));
    }

    /**
     * Read User Document List
     */
    async readUserDocumentListUsersMeDocumentsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentsMetas> {
        const response = await this.readUserDocumentListUsersMeDocumentsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read Users Me
     */
    async readUsersMeUsersMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPublic>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }


        let urlPath = `/users/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPublicFromJSON(jsonValue));
    }

    /**
     * Read Users Me
     */
    async readUsersMeUsersMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPublic> {
        const response = await this.readUsersMeUsersMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update User Document
     */
    async updateUserDocumentDocumentsDocumentUuidPatchRaw(requestParameters: UpdateUserDocumentDocumentsDocumentUuidPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Document>> {
        if (requestParameters['documentUuid'] == null) {
            throw new runtime.RequiredError(
                'documentUuid',
                'Required parameter "documentUuid" was null or undefined when calling updateUserDocumentDocumentsDocumentUuidPatch().'
            );
        }

        if (requestParameters['documentUpdate'] == null) {
            throw new runtime.RequiredError(
                'documentUpdate',
                'Required parameter "documentUpdate" was null or undefined when calling updateUserDocumentDocumentsDocumentUuidPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }


        let urlPath = `/documents/{document_uuid}`;
        urlPath = urlPath.replace(`{${"document_uuid"}}`, encodeURIComponent(String(requestParameters['documentUuid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentUpdateToJSON(requestParameters['documentUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentFromJSON(jsonValue));
    }

    /**
     * Update User Document
     */
    async updateUserDocumentDocumentsDocumentUuidPatch(requestParameters: UpdateUserDocumentDocumentsDocumentUuidPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Document> {
        const response = await this.updateUserDocumentDocumentsDocumentUuidPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
